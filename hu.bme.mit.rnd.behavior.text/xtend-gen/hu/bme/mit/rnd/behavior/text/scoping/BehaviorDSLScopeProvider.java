/**
 * generated by Xtext
 */
package hu.bme.mit.rnd.behavior.text.scoping;

import Behavior.Component;
import Behavior.State;
import Behavior.Transition;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class BehaviorDSLScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Transition_guardStates(final Transition t, final EReference ref) {
    IScope _xblockexpression = null;
    {
      EObject _eContainer = t.eContainer();
      final Component trancomp = ((Component) _eContainer);
      EObject _eContainer_1 = trancomp.eContainer();
      final Behavior.System sys = ((Behavior.System) _eContainer_1);
      TreeIterator<EObject> _eAllContents = sys.eAllContents();
      Iterator<State> _filter = Iterators.<State>filter(_eAllContents, State.class);
      Iterable<State> _iterable = IteratorExtensions.<State>toIterable(_filter);
      _xblockexpression = Scopes.scopeFor(_iterable);
    }
    return _xblockexpression;
  }
}
